// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  READER
  CREATOR
  ADMIN
  SUPER_ADMIN
}

enum ContentType {
  WEBTOON
  BOOK
  VIDEO
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum SubscriptionPlan {
  FREE
  PREMIUM
  PRO
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  username  String
  role      UserRole @default(READER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  content      Content[]
  subscriptions Subscription[]
  donations    Donation[]

  @@map("users")
}

model Content {
  id          String        @id @default(cuid())
  title       String
  description String?
  type        ContentType
  status      ContentStatus @default(DRAFT)
  authorId    String
  createdAt   DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  author       User       @relation(fields: [authorId], references: [id])
  chapters     Chapter[]
  subscriptions Subscription[]

  @@map("content")
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  content   String?
  order     Int
  contentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentRef Content @relation(fields: [contentId], references: [id])
  media      Media[]

  @@map("chapters")
}

model Media {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  chapterId String
  createdAt DateTime  @default(now())

  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@map("media")
}

model Subscription {
  id         String             @id @default(cuid())
  userId     String
  contentId  String?
  plan       SubscriptionPlan
  status     SubscriptionStatus @default(ACTIVE)
  stripeId   String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  content Content? @relation(fields: [contentId], references: [id])

  @@map("subscriptions")
}

model Donation {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  stripeId  String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("donations")
}
